@model Hearts4Kids.Models.ReceiptModel

@{
    ViewBag.Title = "Receipt";
}
@section Styles{
    @Styles.Render("~/Content/themes/base/css")
    @Styles.Render("~/Content/userForms")
}
<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("CreateReceipt","Subscription",FormMethod.Post,new { id="createReceiptForm", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Generate Receipt</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CountryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.CountryId, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateReceived, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateReceived, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.DateReceived, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TransferMethodId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.TransferMethodId, new { @class = "form-control"  })
                @Html.ValidationMessageFor(model => model.TransferMethodId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
            <p class='help-block col-md-10 col-md-push-2'>@Html.DescriptionFor(model => model.Description)</p>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.IsOrganisation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsOrganisation)
                    @Html.ValidationMessageFor(model => model.IsOrganisation, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.WebUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.WebUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.WebUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LogoSrc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-9">
                <div class="input-group">
                    <span class="input-group-btn">
                        <span class="btn btn-primary btn-file">
                            Browse&hellip; <input type="file" accept="image/*" name="logoImg" id="logoImg" />
                        </span>
                    </span>
                    @Html.TextBoxFor(model => model.LogoSrc, new { @class = "form-control urlField", @readonly = "readonly" })
                </div>

            </div>
            @if (Model.LogoSrc != null)
            {
                <div class="col-md-1 pull-right">
                    <img src="@Url.Content(Model.LogoSrc)" class="img-responsive" />
                </div>
            }
            <p class='help-block col-md-9 col-md-push-2'>@Html.DescriptionFor(model => model.LogoSrc)</p>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryUI")
    <script type="text/javascript">
        ; (function ($) {
            $('.datepicker').datepicker({ dateFormat: "dd/mm/yy", maxDate: new Date() });

            $.validator.addMethod("dateITA", function (value, element) {
                var check = false,
                    re = /^\d{1,2}\/\d{1,2}\/\d{4}$/,
                    adata, gg, mm, aaaa, xdata;
                if (re.test(value)) {
                    adata = value.split("/");
                    gg = parseInt(adata[0], 10);
                    mm = parseInt(adata[1], 10);
                    aaaa = parseInt(adata[2], 10);
                    xdata = new Date(aaaa, mm - 1, gg, 12, 0, 0, 0);
                    if ((xdata.getFullYear() === aaaa) && (xdata.getMonth() === mm - 1) && (xdata.getDate() === gg)) {
                        check = true;
                    } else {
                        check = false;
                    }
                } else {
                    check = false;
                }
                return this.optional(element) || check;
            }, "Please enter a correct date");

            $.validator.methods.date = $.validator.methods.dateITA;

            $('#IsOrganisation').on('change', function () {
                $('#WebUrl,#logoImg,#LogoSrc').prop('disabled', !this.checked).toggleClass('disabled', !this.checked);
            }).trigger('change');

            $('#TransferMethodId').on('change', function () {
                var selval = $(this).val();
                $('#Description').prop('disabled',selval!=3 && selval!=4);
            }).trigger('change');

            var mainForm = $('#createReceiptForm');
            function updateOnAjax(data) {
                if (!data) {return;}
                var p, v, $els = $('input,select,textarea', mainForm);
                for (p in data){
                    if (data.hasOwnProperty(p)) {
                        v = data[p];
                        if (typeof v == "boolean") {
                            $els.filter('[name="' + p + '"]').prop('checked', v).trigger('change');
                        } else {
                            $els.filter('[name="' + p + '"]').val(v).trigger('change');
                        }
                    }
                }
            }
            var lastEmail;
            $('#Email', mainForm).autocomplete(
                {
                    delay: 500,
                    minLength: 1,
                    source: function (request, response) {
                        $.ajax({
                            url: "GetEmails/",
                            data: { startsWith: request.term },
                            dataType: "json",
                            type: "POST"
                        }).success(response);
                    }
                })
                .on('blur', function () {
                    if (lastEmail == this.value) { return; }
                    lastEmail = this.value;
                    $.ajax({
                        url: "GetDonorInfo/",
                        data: { email: this.value },
                        dataType: "json",
                        type: "POST"
                    }).success(updateOnAjax);
                });


        })(jQuery);


    </script>
}